@page "/register"

@using System.Text.RegularExpressions
@using Application.DTOs
@using WebUI.Services.UserAccountServices

@inject IUserAccountService userService
@inject ISnackbar snackbar
@inject NavigationManager navigationManager

<style>
    .form-container {
        width: 320px;
        border-radius: 0.75rem;
        background-color: rgba(17, 24, 39, 1);
        padding: 2rem;
        color: rgba(243, 244, 246, 1);
    }

    .title {
        text-align: center;
        font-size: 1.5rem;
        line-height: 2rem;
        font-weight: 700;
    }

    .form {
        margin-top: 1.5rem;
    }

    .input-group {
        margin-top: 0.25rem;
        font-size: 0.875rem;
        line-height: 1.25rem;
    }

        .input-group label {
            display: block;
            color: rgba(156, 163, 175, 1);
            margin-bottom: 4px;
        }

        .input-group input {
            width: 100%;
            border-radius: 0.375rem;
            border: 1px solid rgba(55, 65, 81, 1);
            outline: 0;
            background-color: rgba(17, 24, 39, 1);
            padding: 0.75rem 1rem;
            color: rgba(243, 244, 246, 1);
        }

            .input-group input:focus {
                border-color: rgba(167, 139, 250);
            }

    .forgot {
        display: flex;
        justify-content: flex-end;
        font-size: 0.75rem;
        line-height: 1rem;
        color: rgba(156, 163, 175,1);
        margin: 8px 0 14px 0;
    }

        .forgot a, .signup a {
            color: rgba(243, 244, 246, 1);
            text-decoration: none;
            font-size: 14px;
        }

            .forgot a:hover, .signup a:hover {
                text-decoration: underline rgba(167, 139, 250, 1);
            }

    .sign {
        display: block;
        width: 100%;
        background-color: rgba(167, 139, 250, 1);
        padding: 0.75rem;
        text-align: center;
        color: rgba(17, 24, 39, 1);
        border: none;
        border-radius: 0.375rem;
        font-weight: 600;
    }

    .signup {
        text-align: center;
        font-size: 0.75rem;
        line-height: 1rem;
        color: rgba(156, 163, 175, 1);
    }

    .centered-container {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 90vh;
    }
</style>

<MudContainer Class="centered-container" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudStack Class="relative" Style="margin: 0 auto">
        @if (isSendCode)
        {
            <MudItem xs="12">
                <MudTextField @bind-Value="confirmationCode" Label="Cod-ul de confirmare" Variant="Variant.Outlined" />
            </MudItem>

            <MudButton OnClick="CodeConfirm" Variant="Variant.Filled" Color="Color.Primary" Style="text-align: center" Class="mt-5">Confirmare</MudButton>
        }
        else
        {
            <EditForm Model="user" OnValidSubmit="HandleSubmit">
                <MudContainer Class="d-flex align-center flex-grow-1 gap-4" Style="height: 100%" MaxWidth="MaxWidth.ExtraExtraLarge">
                    <MudStack Class="relative" Style="margin: 3 auto">
                        <div class="form-container">
                            <p class="title">Înregistrează-te</p>
                            <br />
                            <div class="input-group">
                                <label style="color:white" for="username">Nume</label>
                                <InputText @bind-Value="user.Username" id="username" class="input" placeholder="Introdu nume" />
                            </div>
                            <br />
                            <div class="input-group">
                                <label style="color:white" for="email">Email</label>
                                <InputText @bind-Value="user.Email" id="email" class="input" placeholder="Introdu email" />
                            </div>
                            <br />
                            <div class="input-group">
                                <label style="color:white" for="password">Parola</label>
                                <InputText @bind-Value="user.Password" id="password" type="password" class="input" placeholder="Introdu parola" />
                            </div>
                            <br />
                            <div class="input-group">
                                <label style="color:white" for="password">Confirmă parola</label>
                                <InputText @bind-Value="confirmPassword" id="confirmPassword" type="password" class="input" placeholder="Introdu parola" />
                            </div>
                            <br />
                            <button class="sign" type="submit">Înregistrare</button>
                            <br />
                            <div class="signup">
                                Ai cont ? <a href="login">Conectează-te</a>
                            </div>
                        </div>
                    </MudStack>
                </MudContainer>
            </EditForm>
        }
    </MudStack>
</MudContainer>

@code {
    private UserDto user = new UserDto();
    private string confirmPassword = string.Empty;
    private string confirmationCode = string.Empty;

    private bool isSendCode = false;

    private async Task HandleSubmit()
    {
        if (user.Username == null || user.Email == null || user.Password == null)
        {
            snackbar.Add("Toate campurile trebuie completate!", Severity.Warning);
            return;
        }

        if (!IsEmailValid(user.Email))
        {
            snackbar.Add("Formatul emailului nu este valid.", Severity.Warning);
            return;
        }

        if (!IsValidPassword(user.Password)) 
        {
            snackbar.Add("Parola trebuie să includă cel puțin o literă mică, o literă mare, o cifră și un simbol!", Severity.Warning);
            return;
        }

        if (user.Password != confirmPassword) 
        {
            snackbar.Add("Parolele nu coincid.", Severity.Warning);
            return;
        }

        var userResponse = await userService.UserCreate(user);

        if (!userResponse.Success)
        {
            snackbar.Add("Înregistrarea a eșuat, încercați din nou.", Severity.Error);
            return;
        }

        var result = await userService.SendConfirmationCode(user.Email);
        if (result)
        {
            snackbar.Add("Un cod de confirmare a fost trimis pe adresa de e-mail.", Severity.Success);
            isSendCode = true;
        }
        else snackbar.Add("A apărut o eroare, încercați din nou.", Severity.Error);
    }

    private bool IsEmailValid(string email)
    {
        var regex = new Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$");
        return regex.IsMatch(email);
    }

    private bool IsValidPassword(string password)
    {
        return password.Any(char.IsLower) &&
               password.Any(char.IsUpper) &&
               password.Any(char.IsDigit) &&
               password.Any(ch => "!@#$%^&*()_+-=[]{}|;:,.<>?".Contains(ch));
    }

    private async void CodeConfirm()
    {
        if (!string.IsNullOrEmpty(confirmationCode))
        {
            var confirmationResult = await userService.VerifyConfirmationCode(user.Email, confirmationCode);
            if (confirmationResult) snackbar.Add("Email-ul a fost confirmat. Logați-vă cu credențialele noi.", Severity.Success);
            else snackbar.Add("Cod de confirmare greșit, încercați din nou.", Severity.Error);
            if (confirmationResult) navigationManager.NavigateTo("/");
        }
        else snackbar.Add("Cod-ul de confirmare lipsește.", Severity.Warning);
    }
}
