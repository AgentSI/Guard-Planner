@using Application.DTOs
@using Application.Interfaces.Pagination
@using WebUI.Services.WorkerServices

@inject IWorkerService workerService
@inject CurrentUserDto currentUser
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <EditForm Model="formDetails" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="formDetails.Value" For="@(() => formDetails.Value)" Label="Procent" Variant="Variant.Outlined" />
                </MudItem>
                <MudGrid Justify="Justify.FlexEnd">
                    <MudItem>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Salvează</MudButton>
                        <MudButton OnClick="Cancel" Variant="Variant.Filled">Anulează</MudButton>
                    </MudItem>
                </MudGrid>
            </MudGrid>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    PaginationParameter paginationParameters = new PaginationParameter();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid? PercentId { get; set; }

    [Parameter]
    public Func<Task> Callback { get; set; }

    void Cancel() => MudDialog.Cancel();

    PercentDto formDetails = new PercentDto();

    string message = string.Empty;
    string messageCssClass = string.Empty;

    private async Task Save()
    {
        bool isSuccessfull = false;

        if (!PercentId.HasValue)
        {
            var id = await workerService.PercentCreate(formDetails.Value);
            isSuccessfull = id != Guid.Empty;
        }

        if (isSuccessfull) Callback?.Invoke();

        MudDialog.Close();
    }
}