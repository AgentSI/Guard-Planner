@page "/workers-hours"
@layout MainLayout

@using Application.DTOs
@using WebUI.Services.WorkerServices

@inject IWorkerService workerService

<MudText Typo="Typo.h6">Orele lucrătorilor pe lună</MudText>

<br />
<MudGrid Spacing="2" AlignItems="Center">
    <MudItem xs="6" sm="4">
        <MudDatePicker @bind-Date="SelectedDate"
                       @bind-Date:after="OnDateChanged"
                       Label="Selectează Luna și Anul"
                       For="@(() => SelectedDate)"
                       DateFormat="MMMM yyyy"
                       DisableToolbar="true"
                       Variant="Variant.Outlined" />
    </MudItem>
    <MudItem xs="6" sm="2">
        <MudButton OnClick="LoadWorkerHours" 
                   Color="Color.Primary" 
                   Variant="Variant.Outlined"
                   FullWidth="true"
                   Style="margin-top: 5px; height: 56px;">Încarcă orele
        </MudButton>
    </MudItem>
</MudGrid>
<br />
<MudTable Items="workerHours" T="WorkerHoursDto">
    <HeaderContent>
        <MudTh>Nume lucrător</MudTh>
        <MudTh>Ore de lucru</MudTh>
    </HeaderContent>
    <RowTemplate Context="context">
        <MudTd>@context.WorkerName</MudTd>
        <MudTd>@context.HoursWorked</MudTd>
    </RowTemplate>
</MudTable>
<br />

@code {
    private int previousMonth;
    private int previousYear;
    private List<WorkerHoursDto> workerHours = new List<WorkerHoursDto>();
    private DateTime? SelectedDate { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        if (SelectedDate.HasValue)
        {
            previousMonth = SelectedDate.Value.Month;
            previousYear = SelectedDate.Value.Year;
            await LoadWorkerHours();
        }
    }

    private async Task OnDateChanged()
    {
        if (SelectedDate.HasValue)
        {
            int currentMonth = SelectedDate.Value.Month;
            int currentYear = SelectedDate.Value.Year;

            if (currentMonth != previousMonth || currentYear != previousYear)
            {
                previousMonth = currentMonth;
                previousYear = currentYear;
                await LoadWorkerHours();
            }
        }
    }

    private async Task LoadWorkerHours()
    {
        workerHours = await workerService.GetWorkerHours(previousMonth, previousYear);
    }
}
