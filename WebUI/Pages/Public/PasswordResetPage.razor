@page "/reset-password"

@using WebUI.Services.UserAccountServices

@inject IUserAccountService userService
@inject ISnackbar snackbar
@inject NavigationManager navigationManager

<MudContainer Class="d-flex align-center flex-grow-1 gap-4" Style="height: 100%" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudStack Class="relative" Style="margin: 0 auto">

        <h3>Resetare parolă</h3>

        @if (isEmail)
        {
            <MudItem xs="12">
                <MudTextField @bind-Value="Code" Label="Cod de securitate" Variant="Variant.Outlined" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="Password" Label="Parola" Variant="Variant.Outlined" InputType="InputType.Password" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="ConfirmPassword" Label="Confirmă parola" Variant="Variant.Outlined" InputType="InputType.Password" />
            </MudItem>
            <MudButton OnClick="Save" Variant="Variant.Filled" Color="Color.Success" Style="text-align: center" Class="mt-5">Salvează</MudButton>
        }
        else
        {
            <MudItem xs="12">
                <MudTextField @bind-Value="Email" Label="Email" Variant="Variant.Outlined" />
            </MudItem>
            <MudButton OnClick="ResetPass" Variant="Variant.Filled" Color="Color.Primary" Style="text-align: center" Class="mt-5">Resetare parolă</MudButton>
        }
    </MudStack>
</MudContainer>

@code {
    private string Email = string.Empty;
    private string Code = string.Empty;
    private string Password = string.Empty;
    private string ConfirmPassword = string.Empty;

    private bool isEmail = false;

    private async Task ResetPass()
    {
        if (!string.IsNullOrEmpty(Email))
        {
            var result = await userService.SendConfirmationCode(Email);

            if (result)
            {
                snackbar.Add("Cod-ul de securitate a fost trimis pe adresa de e-mail.", Severity.Success);
                isEmail = true;
            }
            else snackbar.Add("Nu există utilizator cu acest email", Severity.Error);
        }
        else snackbar.Add("Introduceți email!", Severity.Warning);
    }

    private async void Save()
    {
        if (Code == null || Password == null || ConfirmPassword == null)
        {
            snackbar.Add("Toate campurile trebuie completate!", Severity.Warning);
            return;
        }

        if (!IsValidPassword(Password))
        {
            snackbar.Add("Parola trebuie să includă cel puțin o literă mică, o literă mare, o cifră și un simbol!", Severity.Warning);
            return;
        }

        if (Password != ConfirmPassword)
        {
            snackbar.Add("Parolele nu coincid.", Severity.Warning);
            return;
        }

        var confirmationResult = await userService.VerifyConfirmationCode(Email, Code);
        if (confirmationResult)
        {
            Password = System.Net.WebUtility.UrlEncode(Password);
            var result = await userService.UserResetPassword(Email, Password);

            if (result != null) snackbar.Add("Parola a fost resetată. Logați-vă cu parola nouă.", Severity.Success);
            else snackbar.Add("A apărut o eroare, încercați din nou.", Severity.Error);

            if (result != null) navigationManager.NavigateTo("/");
        }
        else
        {
            snackbar.Add("Cod de securitate greșit. Încercați din nou.", Severity.Error);
        }
    }

    private bool IsValidPassword(string password)
    {
        return password.Any(char.IsLower) &&
               password.Any(char.IsUpper) &&
               password.Any(char.IsDigit) &&
               password.Any(ch => "!@#$%^&*()_+-=[]{}|;:,.<>?".Contains(ch));
    }
}
