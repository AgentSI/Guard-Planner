@using Application.DTOs
@using Application.Interfaces.Pagination
@using WebUI.Services.UserAccountServices

@inject IUserAccountService userService
@inject CurrentUserDto currentUser

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Style="height:100px; width:100px; position:fixed; top:40%; left:50%;" Indeterminate="true" />
}

<MudDialog>
    <DialogContent>
        <EditForm Model="userFormDetails" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField @bind-Value="userFormDetails.Username" For="@(() => userFormDetails.Username)" Label="Nume" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="userFormDetails.Email" For="@(() => userFormDetails.Email)" Label="Email" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect T="string" MultiSelection="false" @bind-Value="userFormDetails.Role" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" Class="form-select-sm" Placeholder="Rol">
                        @foreach (var role in roles)
                        {
                            <MudSelectItem Value="@role" Class="form-select-sm">@role</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudGrid Justify="Justify.FlexEnd">
                    <MudItem>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">Salvează</MudButton>
                        <MudButton OnClick="Cancel" Variant="Variant.Filled">Anulează</MudButton>
                    </MudItem>
                </MudGrid>
            </MudGrid>
        </EditForm>
    </DialogContent>
</MudDialog>

@code {
    PaginationParameter paginationParameters = new PaginationParameter();

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid? UserId { get; set; }

    [Parameter]
    public Func<Task> Callback { get; set; }

    void Cancel() => MudDialog.Cancel();

    UserDto userFormDetails = new UserDto();
    private List<string> roles = new List<string>();

    private bool isLoading = true;

    protected async override Task OnInitializedAsync()
    {
        if (UserId.HasValue)
        {
            userFormDetails = await userService.GetUserById(UserId.Value);
        }

        isLoading = false;
        roles = await userService.GetRoles();
        StateHasChanged();
    }

    private async Task Save()
    {
        bool isSuccessfull = false;

        if (!UserId.HasValue)
        {
            var createUser = new UserDto
                {
                    Email = userFormDetails.Email,
                    Username = userFormDetails.Username,
                    Role = userFormDetails.Role
                };

            var userResponse = await userService.UserCreate(createUser);
            if (userResponse.Success) isSuccessfull = true;
        }
        else
        {
            var userToEdit = new UserDto
                {
                    Id = userFormDetails.Id,
                    Email = userFormDetails.Email,
                    Username = userFormDetails.Username,
                    Role = userFormDetails.Role
                };

            var result = await userService.UserEdit(userToEdit);
            if (result != null) isSuccessfull = true;
        }

        if (isSuccessfull) Callback?.Invoke();

        MudDialog.Close();
    }
}