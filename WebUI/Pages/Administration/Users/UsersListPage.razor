@page "/users"
@layout MainLayout

@using Application.DTOs
@using Application.Interfaces.Pagination
@using WebUI.Pages.Administration.Users.Components
@using WebUI.Services.UserAccountServices

@inject IUserAccountService userService
@inject IDialogService dialogsService

<AuthorizeView Context="view">

    @if (isLoadingType)
    {
        <MudProgressCircular Color="Color.Primary" Style="height:100px; width:100px; position:fixed; top:40%; left:50%;" Indeterminate="true" />
    }
    else
    {
        <AuthorizeView>
            <div class="d-flex justify-end flex-grow-1 gap-4 mb-2 mt-4">
                <MudButton StartIcon="@Icons.Material.Filled.Add" OnClick="()=>OpenDialog()" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto">Adaugă utilizator</MudButton>
            </div>
        </AuthorizeView>

        <MudTable Items="users" T="UserDto">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Lista utilizatori</MudText>
                <MudSpacer />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Nume
                    <MudButton OnClick="@(() => SortColumn(nameof(UserDto.Username)))">
                        <MudIcon Icon="@(GetSortIcon(nameof(UserDto.Username)))" Size="@Size.Small" />
                    </MudButton>
                </MudTh>
                <MudTh>Email
                    <MudButton OnClick="@(() => SortColumn(nameof(UserDto.Email)))">
                        <MudIcon Icon="@(GetSortIcon(nameof(UserDto.Email)))" Size="@Size.Small" />
                    </MudButton>
                </MudTh>
                <MudTh>Rol
                    <MudButton OnClick="@(() => SortColumn(nameof(UserDto.Role)))">
                        <MudIcon Icon="@(GetSortIcon(nameof(UserDto.Role)))" Size="@Size.Small" />
                    </MudButton>
                </MudTh>
                <MudTh>Acțiuni</MudTh>
            </HeaderContent>
            <RowTemplate Context="context">
                <MudTd>@context.Username</MudTd>
                <MudTd>@context.Email</MudTd>
                <MudTd>@context.Role</MudTd>
                <MudTd>
                    <AuthorizeView Context="edit">
                        <MudButton Variant="Variant.Outlined" OnClick="()=>OpenDialog(context.Id)" Color="Color.Success"><MudIcon Icon="@Icons.Material.Filled.Edit" Size="@Size.Small" /></MudButton>
                    </AuthorizeView>
                    <AuthorizeView Context="delete">
                        <MudButton Variant="Variant.Outlined" OnClick="()=>OpenDialog(context.Id, true)" Color="Color.Error"><MudIcon Icon="@Icons.Material.Filled.Delete" Size="@Size.Small" /></MudButton>
                    </AuthorizeView>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudPagination SelectedChanged="SelectPage" Count="@TotalPages" Selected="@CurrentPage" Class="pa-4" />
            </PagerContent>
        </MudTable>
    }
</AuthorizeView>

@code {
    public bool isLoadingType = true;
    private string sortColumn;
    private bool? sortDirection = null;

    private List<UserDto> users = new List<UserDto>();

    private const int PageSize = 10;
    public int TotalPages { get; set; }
    public int CurrentPage { get; set; } = 1;
    public EventCallback<int> PageChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        isLoadingType = false;
        StateHasChanged();
    }

    private async Task SelectPage(int page)
    {
        if (page != CurrentPage && page > 0 && page <= TotalPages)
        {
            CurrentPage = page;
            await PageChanged.InvokeAsync(page);
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        var parameters = new PaginationParameter
            {
                PageNumber = CurrentPage,
                PageSize = PageSize,
                SortBy = sortColumn,
                SortDescending = sortDirection
            };

        var result = await userService.GetUsers(parameters);

        if (result == null)
        {
            users = new List<UserDto>();
        }
        else
        {
            var newList = result.Items.ToList();
            TotalPages = (int)Math.Ceiling((double)result.TotalItems / PageSize);
            users = newList;
            StateHasChanged();
        }
    }

    private void SortColumn(string columnName)
    {
        if (sortColumn == columnName)
        {
            sortDirection = sortDirection == true ? false : true;
        }
        else
        {
            sortColumn = columnName;
            sortDirection = true;
        }

        LoadData();
    }

    private string GetSortIcon(string columnName)
    {
        if (columnName == sortColumn && sortDirection != null)
            return sortDirection == true ? Icons.Material.Filled.ArrowUpward : Icons.Material.Filled.ArrowDownward;

        return Icons.Material.Filled.ArrowDownward;
    }

    private void OpenDialog(Guid? content = null, bool delete = false)
    {
        var dialog = default(IDialogReference);
        var parameters = new DialogParameters();
        var callback = async () => { await OnInitializedAsync(); };

        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                MaxWidth = MudBlazor.MaxWidth.Large
            };

        parameters.Add("UserId", content);
        parameters.Add("callback", callback);

        if (delete)  dialog = dialogsService.Show<DeleteComponent>("Sunteți sigur că doriți să ștergeți acest utilizator ?", parameters, options);
        else dialog = dialogsService.Show<AddEditUserComponent>("Detalii utilizator", parameters, options);
    }
}
